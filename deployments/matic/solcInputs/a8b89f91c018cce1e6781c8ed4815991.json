{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IRouteRepository.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ninterface IRouteRepository {\n    struct RouteInfo {\n        address router;\n        address[] path;\n    }\n\n    function getSwapRoute(address _fromToken, address _toToken) external view returns (address _router, address[] memory _path);\n}\n"
    },
    "contracts/VaultMaster.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IVaultV2.sol\";\nimport \"./interfaces/IVaultFactoryV2.sol\";\nimport \"./interfaces/IUniswapV2Pair.sol\";\nimport \"./interfaces/IUniswapV2Router.sol\";\nimport \"./interfaces/IRouteRepository.sol\";\n\ncontract VaultMaster is Ownable, Initializable {\n    using SafeERC20 for IERC20;\n\n    struct VaultInfo {\n        uint256 templateId;\n        uint256 balanceInFarm;\n        uint256 pendingRewards;\n        address wantToken;\n        address rewardToken;\n        bool canAbandon;\n    }\n\n    IVaultFactoryV2 public factory;\n    address[] public vaults;\n    mapping(address => bool) public vaultsMapping;\n    mapping(address => address) public claimStrategies;\n\n    // ratios\n    uint256 private constant RATIO_PRECISION = 1e6;\n    uint256 private constant SWAP_TIME_OUT = 900; // 15 minutes\n    uint256 public constant slippage = 20000; // 2%\n    IRouteRepository public routeRepository;\n\n    // events\n    event Deposited(address indexed _vault, address _token, uint256 _amount);\n    event Withdrawn(address indexed _vault, address _token, uint256 _amount);\n    event Claimed(address indexed _vault, address _token, uint256 _amount);\n\n    // modifiers\n    modifier onlyFactoryOrOwner() {\n        require(msg.sender == address(factory) || msg.sender == owner(), \"Only factory or owner can call\");\n        _;\n    }\n\n    // constructors\n    constructor() {\n        factory = IVaultFactoryV2(msg.sender);\n    }\n\n    function initialize(address _owner, address _routeRepository) external initializer {\n        require(msg.sender == address(factory), \"Only factory can call initialize()\");\n        require(_routeRepository != address(0), \"Invalid route repository\");\n        transferOwnership(_owner);\n        routeRepository = IRouteRepository(_routeRepository);\n    }\n\n    // =========== views =================================\n\n    function vaultInfo(address _vaultAddress) external view returns (VaultInfo memory) {\n        require(vaultsMapping[_vaultAddress], \"vault not exist\");\n        IVaultV2 vault = IVaultV2(_vaultAddress);\n        VaultInfo memory info = VaultInfo(\n            vault.vaultTemplateId(),\n            vault.balanceInFarm(),\n            vault.pending(),\n            vault.wantToken(),\n            vault.rewardToken(),\n            vault.canAbandon()\n        );\n        return info;\n    }\n\n    // =========== deposit function ======================\n\n    function deposit(address _vaultAddress, uint256 _wantAmt) external onlyOwner {\n        _deposit(msg.sender, _vaultAddress, _wantAmt, false);\n    }\n\n    function _deposit(\n        address _depositor,\n        address _vaultAddress,\n        uint256 _wantAmt,\n        bool _autoCompound\n    ) internal {\n        require(vaultsMapping[_vaultAddress], \"vault not exist\");\n\n        IVaultV2 vault = IVaultV2(_vaultAddress);\n        IERC20 _wantToken = IERC20(vault.wantToken());\n        _wantToken.safeApprove(_vaultAddress, 0);\n        _wantToken.safeApprove(_vaultAddress, _wantAmt);\n\n        // 1. transfer from owner to vaultMaster\n        if (!_autoCompound) {\n            _wantToken.safeTransferFrom(_depositor, address(this), _wantAmt);\n        }\n\n        // 2. call vault.deposit()\n        vault.deposit(_wantAmt);\n\n        emit Deposited(_vaultAddress, address(_wantToken), _wantAmt);\n    }\n\n    // =========== withdraw function ======================\n\n    function withdraw(address _vaultAddress, uint256 _amount) external onlyOwner {\n        require(vaultsMapping[_vaultAddress], \"vault not exist\");\n        IVaultV2 vault = IVaultV2(_vaultAddress);\n\n        // 1. withdraw\n        (uint256 _withdrawnAmount, uint256 _rewardAmount) = vault.withdraw(_amount);\n\n        // 2. transfer LP back to owner\n        IERC20 _wantToken = IERC20(vault.wantToken());\n        _wantToken.safeTransfer(msg.sender, _withdrawnAmount);\n\n        // 3. reward token => claim strategy\n        _applyClaimStrategy(_vaultAddress, _rewardAmount);\n\n        emit Withdrawn(_vaultAddress, address(_wantToken), _withdrawnAmount);\n    }\n\n    // =========== exit function ======================\n\n    function exit(address _vaultAddress) external onlyOwner {\n        require(vaultsMapping[_vaultAddress], \"vault not exist\");\n        IVaultV2 vault = IVaultV2(_vaultAddress);\n\n        // 1. withdraw\n        (uint256 _withdrawnAmount, uint256 _rewardAmount) = vault.exit();\n\n        // 2. transfer LP back to owner\n        IERC20 _wantToken = IERC20(vault.wantToken());\n        _wantToken.safeTransfer(msg.sender, _withdrawnAmount);\n\n        // 3. reward token => claim strategy\n        _applyClaimStrategy(_vaultAddress, _rewardAmount);\n\n        emit Withdrawn(_vaultAddress, address(_wantToken), _withdrawnAmount);\n    }\n\n    // =========== compound functions =====================\n\n    // compound all vaults\n    function compoundAll() external onlyOwner {\n        _compoundMultiple(vaults);\n    }\n\n    function compound(address[] calldata _vaultAddresses) public onlyOwner {\n        _compoundMultiple(_vaultAddresses);\n    }\n\n    // compound multiple vaults\n    function _compoundMultiple(address[] memory _vaultAddresses) internal {\n        for (uint256 i = 0; i < _vaultAddresses.length; i++) {\n            _compound(_vaultAddresses[i]);\n        }\n    }\n\n    // compound 1 specific vault\n    function _compound(address _vaultAddress) internal {\n        if (!vaultsMapping[_vaultAddress]) {\n            return;\n        }\n        IVaultV2 vault = IVaultV2(_vaultAddress);\n\n        // 1. claim rewards\n        uint256 _amount = vault.claim();\n\n        // 2. compounding\n        if (_amount == 0) {\n            return;\n        }\n\n        IUniswapV2Pair wantLP = IUniswapV2Pair(vault.wantToken());\n        IERC20 token0 = IERC20(wantLP.token0());\n        IERC20 token1 = IERC20(wantLP.token1());\n        address rewardToken = vault.rewardToken();\n        uint256 _token0Amount = 0;\n        uint256 _token1Amount = 0;\n        if (rewardToken != address(token0)) {\n            _token0Amount = _swap(rewardToken, address(token0), _amount / 2);\n        } else {\n            _token0Amount = _amount / 2;\n        }\n\n        if (rewardToken != address(token1)) {\n            _token1Amount = _swap(rewardToken, address(token1), _amount / 2);\n        } else {\n            _token1Amount = _amount / 2;\n        }\n\n        uint256 _addedLpAmount = 0;\n        if (_token0Amount > 0 && _token1Amount > 0) {\n            address _liquidityRouter = vault.liquidityRouter();\n            token0.safeIncreaseAllowance(_liquidityRouter, _token0Amount);\n            token1.safeIncreaseAllowance(_liquidityRouter, _token1Amount);\n            (, , _addedLpAmount) = IUniswapV2Router(_liquidityRouter).addLiquidity(\n                address(token0),\n                address(token1),\n                _token0Amount,\n                _token1Amount,\n                0,\n                0,\n                address(this),\n                block.timestamp + SWAP_TIME_OUT\n            );\n        }\n\n        if (_addedLpAmount > 0) {\n            _deposit(address(this), _vaultAddress, _addedLpAmount, true);\n        }\n    }\n\n    // =========== claim functions =====================\n\n    function claimAll() external onlyOwner {\n        // claim all vaults\n        _claimMultiple(vaults);\n    }\n\n    function claim(address[] calldata _vaultAddresses) public onlyOwner {\n        _claimMultiple(_vaultAddresses);\n    }\n\n    function _claimMultiple(address[] memory _vaultAddresses) internal {\n        // claim multiple vaults\n        for (uint256 i = 0; i < _vaultAddresses.length; i++) {\n            _claim(_vaultAddresses[i]);\n        }\n    }\n\n    function _claim(address _vaultAddress) internal {\n        // claim 1 specific vault\n        if (vaultsMapping[_vaultAddress]) {\n            IVaultV2 vault = IVaultV2(_vaultAddress);\n            // 1. claim rewards\n            uint256 _amount = vault.claim();\n            // 2. apply claim strategy\n            _applyClaimStrategy(_vaultAddress, _amount);\n        }\n    }\n\n    function _applyClaimStrategy(address _vaultAddress, uint256 _amount) internal {\n        require(vaultsMapping[_vaultAddress], \"Vault not existed\");\n        IVaultV2 vault = IVaultV2(_vaultAddress);\n        IERC20 rewardToken = IERC20(vault.rewardToken());\n        address targetClaimToken = claimStrategies[_vaultAddress];\n        if (targetClaimToken == address(0)) {\n            rewardToken.safeTransfer(owner(), _amount);\n            emit Claimed(_vaultAddress, address(rewardToken), _amount);\n        } else {\n            uint256 _outputAmt = _swap(address(rewardToken), targetClaimToken, _amount);\n            if (_outputAmt > 0) {\n                IERC20(targetClaimToken).safeTransfer(owner(), _outputAmt);\n            }\n            emit Claimed(_vaultAddress, targetClaimToken, _outputAmt);\n        }\n    }\n\n    // =========== factory functions ===================\n\n    function addVault(address _vaultAddress) external onlyFactoryOrOwner() {\n        require(!vaultsMapping[_vaultAddress], \"Vault existed\");\n        vaults.push(_vaultAddress);\n        vaultsMapping[_vaultAddress] = true;\n    }\n\n    function removeVault(address _vaultAddress) external onlyOwner() {\n        require(vaultsMapping[_vaultAddress], \"Vault not existed\");\n        IVaultV2 vault = IVaultV2(_vaultAddress);\n        require(vault.canAbandon(), \"Vault cannot be abandonned\");\n        delete vaultsMapping[_vaultAddress];\n        for (uint256 i = 0; i < vaults.length; i++) {\n            if (vaults[i] == _vaultAddress) {\n                vaults[i] = vaults[vaults.length - 1];\n                break;\n            }\n        }\n        vaults.pop();\n    }\n\n    // =========== dust functions ======================\n\n    function dustBalance(address _dustToken) external view returns (uint256) {\n        return IERC20(_dustToken).balanceOf(address(this));\n    }\n\n    function collectDustTokens(address[] calldata _dustTokens) external onlyOwner {\n        for (uint256 i = 0; i < _dustTokens.length; i++) {\n            uint256 _dustBalance = IERC20(_dustTokens[i]).balanceOf(address(this));\n            IERC20(_dustTokens[i]).safeTransfer(msg.sender, _dustBalance);\n        }\n    }\n\n    function cleanDustTokens(address[] calldata _dustTokens, address _targetToken) external onlyOwner {\n        uint256 _outputAmt = 0;\n        for (uint256 i = 0; i < _dustTokens.length; i++) {\n            uint256 _dustBalance = IERC20(_dustTokens[i]).balanceOf(address(this));\n            IERC20(_dustTokens[i]).safeTransfer(msg.sender, _dustBalance);\n            _outputAmt = _outputAmt + _swap(_dustTokens[i], _targetToken, _dustBalance);\n        }\n        IERC20(_targetToken).safeTransfer(msg.sender, _outputAmt);\n    }\n\n    // =========== swap functions ======================\n\n    function _swap(\n        address _inputToken,\n        address _outputToken,\n        uint256 _inputAmount\n    ) internal returns (uint256) {\n        if (_inputAmount == 0) {\n            return 0;\n        }\n        (address _router, address[] memory _path) = routeRepository.getSwapRoute(_inputToken, _outputToken);\n        require(_router != address(0), \"invalid route\");\n        require(_path[0] == _inputToken, \"Route must start with src token\");\n        require(_path[_path.length - 1] == _outputToken, \"Route must end with dst token\");\n        IERC20(_inputToken).safeApprove(_router, 0);\n        IERC20(_inputToken).safeApprove(_router, _inputAmount);\n        uint256 _balanceBefore = IERC20(_outputToken).balanceOf(address(this));\n        _safeSwap(_router, _inputAmount, slippage, _path, address(this), block.timestamp + SWAP_TIME_OUT);\n        uint256 _balanceAfter = IERC20(_outputToken).balanceOf(address(this));\n        return _balanceAfter - _balanceBefore;\n    }\n\n    function _safeSwap(\n        address _swapRouterAddress,\n        uint256 _amountIn,\n        uint256 _slippage,\n        address[] memory _path,\n        address _to,\n        uint256 _deadline\n    ) internal {\n        IUniswapV2Router _swapRouter = IUniswapV2Router(_swapRouterAddress);\n        require(_path.length > 0, \"invalidSwapPath\");\n        uint256[] memory amounts = _swapRouter.getAmountsOut(_amountIn, _path);\n        uint256 _minAmountOut = (amounts[amounts.length - 1] * (RATIO_PRECISION - _slippage)) / RATIO_PRECISION;\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(_amountIn, _minAmountOut, _path, _to, _deadline);\n    }\n\n    // =========== configuration =======================\n\n    function setClaimStategy(address _vaultAddress, address _target) external onlyOwner {\n        require(vaultsMapping[_vaultAddress], \"vault not exist\");\n        claimStrategies[_vaultAddress] = _target;\n    }\n\n    function removeClaimStategy(address _vaultAddress) external onlyOwner {\n        delete claimStrategies[_vaultAddress];\n    }\n\n    function useCustomRouteRepository(IRouteRepository _routeRepository) external onlyOwner {\n        require(address(_routeRepository) != address(0), \"invalid address\");\n        routeRepository = _routeRepository;\n    }\n\n    // =========== emergency functions =================\n\n    function rescueFund(address _token, uint256 _amount) public virtual onlyOwner {\n        IERC20(_token).safeTransfer(owner(), _amount);\n    }\n\n    function executeTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data\n    ) public onlyOwner returns (bytes memory) {\n        bytes memory callData;\n\n        if (bytes(signature).length == 0) {\n            callData = data;\n        } else {\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n        }\n        // solium-disable-next-line security/no-call-value\n        (bool success, bytes memory returnData) = target.call{value: value}(callData);\n        require(success, string(\"DevFund::executeTransaction: Transaction execution reverted.\"));\n        return returnData;\n    }\n\n    receive() external payable {}\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IVaultV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./IVaultMaster.sol\";\n\ninterface IVaultV2 {\n    function initialize(\n        uint256 _vaultTemplateId,\n        address _owner,\n        address _vaultMaster\n    ) external;\n\n    function vaultMaster() external view returns (IVaultMaster);\n\n    function liquidityRouter() external view returns (address);\n\n    function isSingleStaking() external view returns (bool);\n\n    function vaultTemplateId() external view returns (uint256);\n\n    function rewardToken() external view returns (address);\n\n    function wantToken() external view returns (address);\n\n    function pending() external view returns (uint256);\n\n    function balanceInFarm() external view returns (uint256);\n\n    function canAbandon() external view returns (bool);\n\n    function deposit(uint256 _wantAmt) external;\n\n    function claim() external returns (uint256 _amount);\n\n    function exit() external returns (uint256 _withdrawnAmount, uint256 _rewardAmount);\n\n    function withdraw(uint256 _wantAmt) external returns (uint256 _withdrawnAmount, uint256 _rewardAmount);\n}\n"
    },
    "contracts/interfaces/IVaultFactoryV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ninterface IVaultFactoryV2 {\n    function policy() external view returns (address);\n    function routerRepository() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ninterface IUniswapV2Pair {\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IUniswapV2Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ninterface IUniswapV2Router {\n    function factory() external pure returns (address);\n\n    function WBNB() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityBNB(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountBNBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountBNB,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityBNB(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountBNBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountBNB);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityBNBWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountBNBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountBNB);\n\n    function removeLiquidityBNBSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountBNBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountBNB);\n\n    function removeLiquidityBNBWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountBNBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountBNB);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactBNBForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForBNBSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactBNBForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactBNB(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForBNB(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapBNBForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IVaultMaster.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ninterface IVaultMaster {\n    function owner() external view returns (address);\n\n    function initialize(address _owner, address _routeRepository) external;\n\n    function addVault(address _vaultAddress) external;\n\n    function removeVault(address _vaultAddress) external;\n}\n"
    },
    "contracts/vaults/_base/VaultBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"../../interfaces/IVaultV2.sol\";\nimport \"../../interfaces/IVaultMaster.sol\";\n\nabstract contract VaultBaseV2 is IVaultV2, Ownable, ReentrancyGuard, Initializable {\n    using SafeERC20 for IERC20;\n\n    IVaultMaster public override vaultMaster;\n    uint256 public override vaultTemplateId;\n    address public override liquidityRouter;\n    address public override rewardToken;\n    address public override wantToken;\n    bool public override isSingleStaking;\n\n    // modifiers\n\n    modifier onlyDepositor() {\n        require(msg.sender == owner() || msg.sender == address(vaultMaster), \"Only owner or vault master can deposit\");\n        _;\n    }\n\n    // constructors\n\n    function initialize(\n        uint256 _vaultTemplateId,\n        address _owner,\n        address _vaultMaster\n    ) external override initializer onlyOwner {\n        require(_owner != address(0), \"invalid address\");\n        transferOwnership(_owner);\n        vaultMaster = IVaultMaster(_vaultMaster);\n        require(vaultMaster.owner() == _owner, \"invalid vault master\");\n        vaultTemplateId = _vaultTemplateId;\n    }\n\n    // virtual functions\n\n    function pending() external view virtual override returns (uint256);\n\n    function balanceInFarm() external view virtual override returns (uint256);\n\n    function canAbandon() external view virtual override returns (bool);\n\n    function deposit(uint256 _wantAmt) external virtual override;\n\n    function claim() external virtual override returns (uint256 _amount);\n\n    function exit() external virtual override returns (uint256 _withdrawnAmount, uint256 _rewardAmount);\n\n    function withdraw(uint256 _wantAmt) external virtual override returns (uint256 _withdrawnAmount, uint256 _rewardAmount);\n\n    // =========== emergency functions =================\n\n    function rescueFund(address _token, uint256 _amount) external onlyOwner {\n        IERC20(_token).safeTransfer(owner(), _amount);\n    }\n\n    function executeTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data\n    ) external onlyOwner returns (bytes memory) {\n        bytes memory callData;\n\n        if (bytes(signature).length == 0) {\n            callData = data;\n        } else {\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n        }\n        // solium-disable-next-line security/no-call-value\n        (bool success, bytes memory returnData) = target.call{value: value}(callData);\n        require(success, string(\"DevFund::executeTransaction: Transaction execution reverted.\"));\n        return returnData;\n    }\n\n    receive() external payable {}\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/vaults/wault/VaultWex.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"../_base/VaultBaseV2.sol\";\nimport \"./IWexMasterChef.sol\";\n\ncontract VaultWex is VaultBaseV2 {\n    using SafeERC20 for IERC20;\n\n    IWexMasterChef public masterChef;\n    uint256 public poolId;\n    uint256 public swapTimeout;\n\n    constructor(\n        address _liquidityRouter,\n        IWexMasterChef _masterChef,\n        uint256 _poolId\n    ) VaultBaseV2() {\n        liquidityRouter = _liquidityRouter;\n        poolId = _poolId;\n        masterChef = _masterChef;\n        (wantToken, , , ) = masterChef.poolInfo(_poolId);\n        rewardToken = _masterChef.wex();\n    }\n\n    // ========== views =================\n\n    function balanceInFarm() public view override returns (uint256) {\n        (uint256 _amount, ) = masterChef.userInfo(poolId, address(this));\n        return _amount;\n    }\n\n    function pending() public view override returns (uint256) {\n        uint256 _pendingInFarm = masterChef.pendingWex(poolId, address(this));\n        uint256 _pendingInVault = IERC20(rewardToken).balanceOf(address(this));\n        return _pendingInFarm + _pendingInVault;\n    }\n\n    function canAbandon() public view override returns (bool) {\n        bool _noRewardTokenLeft = IERC20(rewardToken).balanceOf(address(this)) == 0;\n        bool _noLpTokenLeft = IERC20(wantToken).balanceOf(address(this)) == 0;\n        bool _noPending = pending() == 0;\n        return _noRewardTokenLeft && _noLpTokenLeft && _noPending;\n    }\n\n    // ========== vault core functions ===========\n\n    function deposit(uint256 _wantAmt) public override onlyDepositor nonReentrant {\n        IERC20(wantToken).safeTransferFrom(msg.sender, address(this), _wantAmt);\n        _depositToFarm();\n    }\n\n    function exit() external override onlyDepositor returns (uint256 _withdrawnAmount, uint256 _rewardAmount) {\n        uint256 _balance = balanceInFarm();\n        _widthdrawFromFarm(_balance, true);\n        (_withdrawnAmount, _rewardAmount) = _withdrawFromVault();\n    }\n\n    function withdraw(uint256 _wantAmt)\n        public\n        override\n        onlyDepositor\n        nonReentrant\n        returns (uint256 _withdrawnAmount, uint256 _rewardAmount)\n    {\n        require(_wantAmt > 0, \"_wantAmt <= 0\");\n        _widthdrawFromFarm(_wantAmt, false);\n        (_withdrawnAmount, _rewardAmount) = _withdrawFromVault();\n    }\n\n    function claim() external override onlyDepositor returns (uint256 _amount) {\n        masterChef.claim(poolId);\n        _amount = IERC20(rewardToken).balanceOf(address(this));\n        if (_amount > 0) {\n            IERC20(rewardToken).safeTransfer(msg.sender, _amount);\n        }\n    }\n\n    // ============= internal functions ================\n\n    function _withdrawFromVault() internal returns (uint256 _withdrawnAmount, uint256 _rewardAmount) {\n        _rewardAmount = IERC20(rewardToken).balanceOf(address(this));\n        if (_rewardAmount > 0) {\n            IERC20(rewardToken).safeTransfer(msg.sender, _rewardAmount);\n        }\n        _withdrawnAmount = IERC20(wantToken).balanceOf(address(this));\n        if (_withdrawnAmount > 0) {\n            IERC20(wantToken).safeTransfer(msg.sender, _withdrawnAmount);\n        }\n    }\n\n    function _depositToFarm() internal {\n        IERC20 wantToken = IERC20(wantToken);\n        uint256 wantAmt = wantToken.balanceOf(address(this));\n        wantToken.safeIncreaseAllowance(address(masterChef), wantAmt);\n        masterChef.deposit(poolId, wantAmt, false);\n    }\n\n    function _widthdrawFromFarm(uint256 _wantAmt, bool _claimRewards) internal {\n        masterChef.withdraw(poolId, _wantAmt, _claimRewards);\n    }\n}\n"
    },
    "contracts/vaults/wault/IWexMasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ninterface IWexMasterChef {\n    function poolInfo(uint256 poolId)\n        external\n        view\n        returns (\n            address lpToken,\n            uint256 allocPoint,\n            uint256 lastRewardBlock,\n            uint256 accRewardPerShare\n        );\n\n    function userInfo(uint256 poolId, address user) external view returns (uint256 amount, uint256 debt);\n\n    function wex() external view returns (address);\n\n    function deposit(\n        uint256 _pid,\n        uint256 _amount,\n        bool _withdrawRewards\n    ) external;\n\n    function withdraw(\n        uint256 _pid,\n        uint256 _amount,\n        bool _withdrawRewards\n    ) external;\n\n    function claim(uint256 _pid) external;\n\n    function pendingWex(uint256 _pid, address _user) external view returns (uint256);\n}\n"
    },
    "contracts/vaults/quickswap/VaultQuickswap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"../_base/VaultBaseV2.sol\";\nimport \"./IQuickswapStakingRewards.sol\";\n\ncontract VaultQuickswapLP is VaultBaseV2 {\n    using SafeERC20 for IERC20;\n\n    IQuickswapStakingRewards public stakingRewards;\n\n    // hardcoded when deploy\n    constructor(address _liquidityRouter, IQuickswapStakingRewards _stakingRewards) VaultBaseV2() {\n        liquidityRouter = _liquidityRouter;\n        stakingRewards = _stakingRewards;\n        wantToken = stakingRewards.stakingToken();\n        rewardToken = stakingRewards.rewardsToken();\n    }\n\n    // ========== views =================\n\n    function balanceInFarm() public view override returns (uint256) {\n        return stakingRewards.balanceOf(address(this));\n    }\n\n    function pending() public view override returns (uint256) {\n        uint256 _pendingInFarm = stakingRewards.earned(address(this));\n        uint256 _pendingInVault = IERC20(rewardToken).balanceOf(address(this));\n        return _pendingInFarm + _pendingInVault;\n    }\n\n    function canAbandon() public view override returns (bool) {\n        bool _noRewardTokenLeft = IERC20(rewardToken).balanceOf(address(this)) == 0;\n        bool _noLpTokenLeft = IERC20(wantToken).balanceOf(address(this)) == 0;\n        bool _noPending = pending() == 0;\n        return _noRewardTokenLeft && _noLpTokenLeft && _noPending;\n    }\n\n    // ========== main functions ==========\n\n    function deposit(uint256 _wantAmt) external override onlyDepositor nonReentrant {\n        IERC20(wantToken).safeTransferFrom(address(msg.sender), address(this), _wantAmt);\n        _depositToFarm();\n    }\n\n    function claim() external override onlyDepositor returns (uint256 _amount) {\n        stakingRewards.getReward();\n        _amount = IERC20(rewardToken).balanceOf(address(this));\n        if (_amount > 0) {\n            IERC20(rewardToken).safeTransfer(msg.sender, _amount);\n        }\n    }\n\n    function exit() external override onlyDepositor returns (uint256 _withdrawnAmount, uint256 _rewardAmount) {\n        stakingRewards.exit();\n        (_withdrawnAmount, _rewardAmount) = _withdrawFromVault();\n    }\n\n    function withdraw(uint256 _wantAmt)\n        external\n        override\n        onlyDepositor\n        nonReentrant\n        returns (uint256 _withdrawnAmount, uint256 _rewardAmount)\n    {\n        require(_wantAmt > 0, \"_wantAmt <= 0\");\n        _widthdrawFromFarm(_wantAmt);\n        (_withdrawnAmount, _rewardAmount) = _withdrawFromVault();\n    }\n\n    // ============= internal functions ================\n\n    function _withdrawFromVault() internal returns (uint256 _withdrawnAmount, uint256 _rewardAmount) {\n        _rewardAmount = IERC20(rewardToken).balanceOf(address(this));\n        if (_rewardAmount > 0) {\n            IERC20(rewardToken).safeTransfer(msg.sender, _rewardAmount);\n        }\n        _withdrawnAmount = IERC20(wantToken).balanceOf(address(this));\n        if (_withdrawnAmount > 0) {\n            IERC20(wantToken).safeTransfer(msg.sender, _withdrawnAmount);\n        }\n    }\n\n    function _depositToFarm() internal {\n        IERC20 _token = IERC20(wantToken);\n        uint256 wantAmt = _token.balanceOf(address(this));\n        _token.safeIncreaseAllowance(address(stakingRewards), wantAmt);\n        stakingRewards.stake(wantAmt);\n    }\n\n    function _widthdrawFromFarm(uint256 _wantAmt) internal {\n        stakingRewards.withdraw(_wantAmt);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/vaults/quickswap/IQuickswapStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ninterface IQuickswapStakingRewards {\n    function stakingToken() external view returns (address);\n\n    function rewardsToken() external view returns (address);\n\n    function balanceOf(address _account) external view returns (uint256);\n\n    function earned(address account) external view returns (uint256);\n\n    function stake(uint256 amount) external;\n\n    function withdraw(uint256 amount) external;\n\n    function exit() external;\n\n    function getReward() external;\n}\n"
    },
    "contracts/VaultFactoryV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"./interfaces/IVaultMaster.sol\";\nimport \"./interfaces/IVaultV2.sol\";\n\ncontract VaultFactoryV2 is Ownable, Initializable {\n    struct VaultTemplate {\n        bytes code;\n        bytes arguments;\n        bool deprecated;\n    }\n\n    struct VaultMasterTemplate {\n        bytes code;\n        bytes arguments;\n    }\n\n    VaultTemplate[] public vaultTemplates;\n    VaultMasterTemplate private vaultMasterTemplate;\n    mapping(address => address) public userVaultMasters;\n\n    address public routerRepository;\n\n    // EVENTS\n    event RouterRepositorySet(address _routerRepository);\n    event VaultCreated(address indexed _owner, address _vault);\n    event VaultMasterCreated(address indexed _owner, address _vaultMaster);\n    event VaultMasterRemoved(address indexed _owner, address _vaultMaster);\n\n    // ========= INITIALIZER =========\n    function initialize(address _routerRepository) external onlyOwner initializer {\n        routerRepository = _routerRepository;\n    }\n\n    // ========= PUBLIC FUNCTIONS =========\n    function getUserVaultMaster(address _user) external view returns (address) {\n        return userVaultMasters[_user];\n    }\n\n    function createVault(uint256 _templateId) external returns (address _vault) {\n        address _vaultMaster = userVaultMasters[msg.sender];\n        require(_vaultMaster != address(0), \"Vault master not existed\");\n\n        VaultTemplate storage _template = vaultTemplates[_templateId];\n        bytes memory bytecode = _template.code;\n        require(bytecode.length != 0, \"vault is not supported\");\n        bytes memory arguments = _template.arguments;\n        require(arguments.length != 0, \"invalid vault arguments\");\n\n        bytecode = abi.encodePacked(bytecode, arguments);\n        bytes32 salt = keccak256(abi.encodePacked(msg.sender, arguments, block.number));\n\n        // solhint-disable no-inline-assembly\n        assembly {\n            _vault := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\n            if iszero(extcodesize(_vault)) {\n                revert(0, 0)\n            }\n        }\n\n        IVaultV2(_vault).initialize(_templateId, msg.sender, _vaultMaster);\n        IVaultMaster(_vaultMaster).addVault(_vault);\n        emit VaultCreated(msg.sender, _vault);\n    }\n\n    function createVaultMaster() external returns (address _vaultMaster) {\n        require(userVaultMasters[msg.sender] == address(0), \"Vault master existed\");\n\n        bytes memory bytecode = vaultMasterTemplate.code;\n        require(bytecode.length != 0, \"vault master is not supported\");\n        bytes memory arguments = vaultMasterTemplate.arguments;\n\n        bytecode = abi.encodePacked(bytecode, arguments);\n        bytes32 salt = keccak256(abi.encodePacked(msg.sender, arguments, block.number));\n\n        // solhint-disable no-inline-assembly\n        assembly {\n            _vaultMaster := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\n            if iszero(extcodesize(_vaultMaster)) {\n                revert(0, 0)\n            }\n        }\n\n        IVaultMaster(_vaultMaster).initialize(msg.sender, routerRepository);\n        userVaultMasters[msg.sender] = _vaultMaster;\n        emit VaultMasterCreated(msg.sender, _vaultMaster);\n    }\n\n    function removeVaultMaster() external {\n        address vaultAddress = userVaultMasters[msg.sender];\n        require(vaultAddress != address(0), \"Vault master not existed\");\n        delete userVaultMasters[msg.sender];\n        emit VaultMasterRemoved(msg.sender, vaultAddress);\n    }\n\n    // ========= RESTRICTED FUNCTIONS =========\n    function setRouter(address _routerRepository) external onlyOwner {\n        require(routerRepository != address(0x0), \"emptyAddress\");\n        require(routerRepository != _routerRepository, \"unchanged\");\n        routerRepository = _routerRepository;\n        emit RouterRepositorySet(_routerRepository);\n    }\n\n    function updateVaultMasterTemplate(bytes calldata _code, bytes calldata _initArguments) external onlyOwner {\n        vaultMasterTemplate = VaultMasterTemplate(_code, _initArguments);\n    }\n\n    function addTemplate(bytes calldata _code, bytes calldata _initArguments) external onlyOwner {\n        VaultTemplate memory _template = VaultTemplate(_code, _initArguments, false);\n        vaultTemplates.push(_template);\n    }\n\n    function removeTemplate(uint256 tid) external onlyOwner {\n        vaultTemplates[tid] = VaultTemplate(\"\", \"\", true);\n    }\n}\n"
    },
    "contracts/RouteRepository.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IRouteRepository.sol\";\n\ncontract RouteRepository is IRouteRepository, Ownable {\n    mapping(address => mapping(address => RouteInfo)) public routes;\n\n    function addRoute(\n        address _from,\n        address _to,\n        address _router,\n        address[] calldata path\n    ) external onlyOwner {\n        require(_from != address(0), \"Src token is invalid\");\n        require(_to != address(0), \"Dst token is invalid\");\n        require(_from != _to, \"Src token must be diff from Dst token\");\n        require(_router != address(0), \"Router is invalid\");\n        require(path[0] == _from, \"Route must start with src token\");\n        require(path[path.length - 1] == _to, \"Route must end with dst token\");\n        RouteInfo memory _info = RouteInfo(_router, path);\n        routes[_from][_to] = _info;\n    }\n\n    function removeRoute(address _from, address _to) external onlyOwner {\n        address[] memory _empty;\n        routes[_from][_to] = RouteInfo(address(0), _empty);\n    }\n\n    function getSwapRoute(address _fromToken, address _toToken)\n        external\n        view\n        override\n        returns (address _router, address[] memory _path)\n    {\n        RouteInfo storage _info = routes[_fromToken][_toToken];\n        _router = _info.router;\n        _path = _info.path;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
